version: '3'
services:
  camunda_acmesky:
    build: ./Camunda/
    container_name: camunda_acmesky
    ports: 
      - 10000:8080
    networks:
      - acmesky-network
  camunda_workers:
    build: ./camunda-workers
    container_name: camunda_workers
    networks:
      - acmesky-network
    env_file:
      - ./camunda-workers/.env
    restart: unless-stopped
    depends_on:
      - acmesky_db
  geographical_distances:
    build: ./geographical-distances
    container_name: geographical_distances
    networks:
      - acmesky-network
    ports:
      - 5000:8080
    env_file:
      - ./geographical-distances/.env
  prontogram_backend:
    build: ./ProntoGram-Backend
    container_name: prontogram_backend
    networks:
      - acmesky-network
    depends_on:
      - prontogram_mq
    ports:
      - 5001:8080
  prontogram_mq:
    image: rabbitmq:3.8.11
    container_name: prontogram_mq
    hostname: prontogram_mq
    volumes:
      - ./ProntoGram-Backend/rabbitmq_data:/var/lib/rabbitmq
    networks:
      - acmesky-network
    logging:
      driver: none
  prontogram_frontend:
    build: ./ProntoGram-Frontend
    container_name: prontogram_frontend
    networks:
      - acmesky-network
    depends_on:
      - prontogram_mq
    ports:
      - 8000:8080
    env_file:
      - ./ProntoGram-Frontend/.env
  travel_company_1:
    build: ./travel-company
    container_name: travel_company_1
    networks:
      - acmesky-network
    ports:
      - 6001:8080
  flight_company_1:
    build: ./flight-company
    container_name: flight_company_1
    networks:
      - acmesky-network
    ports:
      - 7001:8080
    env_file:
      - ./flight-company/.env
    environment:
      POSTGRES_DB: flightcompany1
      POSTGRES_HOST: flight_companies_db
    depends_on:
      - flight_companies_db
    restart: unless-stopped # Necessary since the first run will fail if flight_companies_db is not ready yet
  flight_companies_db: # Shared postgres instance for flight companies
    image: postgres:13.2
    container_name: flight_companies_db
    env_file:
      - ./flight-company/.env
    volumes:
      - ./flight-company/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - acmesky-network
    logging:
      driver: none
  payment_provider_backend:
    build: ./PaymentProvider-Backend
    container_name: payment_provider_backend
    ports:
      - 4001:8080
    networks:
      - acmesky-network
  payment_provider_frontend:
    build: ./PaymentProvider-Frontend
    container_name: payment_provider_frontend
    ports:
      - 4002:4200
    networks:
      - acmesky-network
    volumes:
      - ./PaymentProvider-Frontend:/app/
  payment_provider_redis:
    image: redis:6.0.10
    container_name: payment_provider_redis
    networks:
      - acmesky-network
    logging:
      driver: none
  acmesky_backend:
    build: ./ACMESky-Backend
    container_name: acmesky_backend
    ports:
      - 9000:8080
    networks:
      - acmesky-network
  acmesky_mongo:
    image: mongo:3.6.22-xenial
    container_name: acmesky_mongo
    networks:
      - acmesky-network
    environment:
      - MONGO_INITDB_DATABASE=interests
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./ACMESky-Backend/mongo_init.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./ACMESky-Backend/mongo_data:/data/db
    logging:
      driver: none
  acmesky_mq:
    image: rabbitmq:3.8.11
    container_name: acmesky_mq
    hostname: acmesky_mq
    volumes:
      - ./ACMESky-Backend/rabbitmq_data:/var/lib/rabbitmq
    networks:
      - acmesky-network
    logging:
      driver: none
  acmesky_db:
    image: postgres:13.2
    container_name: acmesky_db
    env_file:
      - ./camunda-workers/.env
    volumes:
      - ./camunda-workers/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./camunda-workers/postgres_data:/var/lib/postgresql
    networks:
      - acmesky-network
    logging:
      driver: none

networks:
  acmesky-network:
    driver: bridge
